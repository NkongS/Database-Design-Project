-- SQLBook: Code
DROP TABLE IF EXISTS Locations, Branches, Employees, Employee_Schedules, Bar_Inventory, Security_Logs, BarTables, Guesses, Membership, Feedback_Reviews, Reservations, Employee_Position; 

CREATE TABLE Locations (
    location_ID    SERIAL PRIMARY KEY,
    address_no     VARCHAR(40),
    street_name    VARCHAR(30),
    city_name      VARCHAR(30) NOT NULL,
    province_name  VARCHAR(25),
    postal_code    VARCHAR(12),
    country_name   VARCHAR(25)
);

CREATE TABLE Employee_Position (
    position_ID    VARCHAR(10) PRIMARY KEY,
    position_name  VARCHAR(30),
    min_salary     INTEGER,
    max_salary     INTEGER
);

CREATE TABLE Employees (
    employee_ID    VARCHAR(10) PRIMARY KEY,
    position_ID    VARCHAR(10) REFERENCES Employee_Position(position_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    branch_ID      INTEGER REFERENCES Branches(branch_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    first_name     VARCHAR(30),
    last_name      VARCHAR(30),
    contact_info   NUMERIC(12),
    email          VARCHAR(45),
    salary         INTEGER,
    hire_date      DATE
);

CREATE TABLE Branches (
    branch_ID      SERIAL PRIMARY KEY,
    location_ID    INTEGER REFERENCES Locations(location_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    branch_name    VARCHAR(40),
    employee_ID    VARCHAR(10) REFERENCES Employees(employee_ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Employee_Schedules (
    schedule_ID    SERIAL PRIMARY KEY,
    branch_ID      INTEGER REFERENCES Branches(branch_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    employee_ID    VARCHAR(10) REFERENCES Employees(employee_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    shift_start    TIME,
    shift_end      TIME
);

CREATE TABLE Bar_Inventory (
    product_ID     SERIAL PRIMARY KEY,
    branch_ID      INTEGER REFERENCES Branches(branch_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    product_name   VARCHAR(30),
    quantity       INTEGER,
    price          INTEGER
);

CREATE TABLE Security_Logs (
    log_ID         SERIAL PRIMARY KEY,
    branch_ID      INTEGER REFERENCES Branches(branch_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    employee_ID    VARCHAR(10) REFERENCES Employees(employee_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    log_time       TIME,
    activity_log   BOOLEAN
);

CREATE TABLE BarTables (
    table_ID       SERIAL PRIMARY KEY,
    start_time     TIME,
    table_status   BOOLEAN
);

CREATE TABLE Guesses (
    branch_ID          INTEGER,
    table_ID           INTEGER,
    guess_first_name   VARCHAR(30),
    guess_last_name    VARCHAR(30),
    guess_band         VARCHAR(30),
    PRIMARY KEY (branch_ID, table_ID),
    FOREIGN KEY(branch_ID) REFERENCES Branches(branch_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(table_ID) REFERENCES BarTables(table_ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Membership (
    membership_id     VARCHAR(10) PRIMARY KEY,
    first_name        VARCHAR(30),
    second_name       VARCHAR(30),
    contact_info      NUMERIC(12),
    membership_status BOOLEAN
);

CREATE TABLE Feedback_Reviews (
    review_ID        SERIAL PRIMARY KEY,
    membership_id    VARCHAR(10) REFERENCES Membership(membership_id) ON UPDATE CASCADE ON DELETE CASCADE,
    rating           INTEGER,
    feedbacks        TEXT
);

CREATE TABLE Reservations (
    reservation_ID     SERIAL PRIMARY KEY,
    branch_ID          INTEGER REFERENCES Branches(branch_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    table_ID           INTEGER REFERENCES BarTables(table_ID) ON UPDATE CASCADE ON DELETE CASCADE,
    membership_id      VARCHAR(10) REFERENCES Membership(membership_id) ON UPDATE CASCADE ON DELETE CASCADE,
    reservation_time   TIME,
    number_of_guests   INTEGER
);